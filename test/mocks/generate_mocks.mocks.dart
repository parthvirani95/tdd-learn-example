// Mocks generated by Mockito 5.0.16 from annotations
// in tdd_example/test/mocks/generate_mocks.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;
import 'dart:typed_data' as _i8;

import 'package:connectivity_plus/connectivity_plus.dart' as _i15;
import 'package:dartz/dartz.dart' as _i3;
import 'package:dio/dio.dart' as _i2;
import 'package:dio/src/options.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:shared_preferences/shared_preferences.dart' as _i5;
import 'package:tdd_example/core/error/failure.dart' as _i13;
import 'package:tdd_example/core/network/network_info.dart' as _i9;
import 'package:tdd_example/core/no_params.dart' as _i17;
import 'package:tdd_example/data/data_sources/user_local_data_source.dart'
    as _i10;
import 'package:tdd_example/data/data_sources/user_remote_data_source.dart'
    as _i12;
import 'package:tdd_example/data/models/user_model.dart' as _i11;
import 'package:tdd_example/domain/entities/user.dart' as _i14;
import 'package:tdd_example/domain/repositories/user_repository.dart' as _i4;
import 'package:tdd_example/domain/use_cases/get_users.dart' as _i16;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeResponseBody_0 extends _i1.Fake implements _i2.ResponseBody {}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

class _FakeUserRepository_2 extends _i1.Fake implements _i4.UserRepository {}

/// A class which mocks [SharedPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferences extends _i1.Mock implements _i5.SharedPreferences {
  MockSharedPreferences() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Set<String> getKeys() => (super.noSuchMethod(Invocation.method(#getKeys, []),
      returnValue: <String>{}) as Set<String>);
  @override
  Object? get(String? key) =>
      (super.noSuchMethod(Invocation.method(#get, [key])) as Object?);
  @override
  bool? getBool(String? key) =>
      (super.noSuchMethod(Invocation.method(#getBool, [key])) as bool?);
  @override
  int? getInt(String? key) =>
      (super.noSuchMethod(Invocation.method(#getInt, [key])) as int?);
  @override
  double? getDouble(String? key) =>
      (super.noSuchMethod(Invocation.method(#getDouble, [key])) as double?);
  @override
  String? getString(String? key) =>
      (super.noSuchMethod(Invocation.method(#getString, [key])) as String?);
  @override
  bool containsKey(String? key) =>
      (super.noSuchMethod(Invocation.method(#containsKey, [key]),
          returnValue: false) as bool);
  @override
  List<String>? getStringList(String? key) =>
      (super.noSuchMethod(Invocation.method(#getStringList, [key]))
          as List<String>?);
  @override
  _i6.Future<bool> setBool(String? key, bool? value) =>
      (super.noSuchMethod(Invocation.method(#setBool, [key, value]),
          returnValue: Future<bool>.value(false)) as _i6.Future<bool>);
  @override
  _i6.Future<bool> setInt(String? key, int? value) =>
      (super.noSuchMethod(Invocation.method(#setInt, [key, value]),
          returnValue: Future<bool>.value(false)) as _i6.Future<bool>);
  @override
  _i6.Future<bool> setDouble(String? key, double? value) =>
      (super.noSuchMethod(Invocation.method(#setDouble, [key, value]),
          returnValue: Future<bool>.value(false)) as _i6.Future<bool>);
  @override
  _i6.Future<bool> setString(String? key, String? value) =>
      (super.noSuchMethod(Invocation.method(#setString, [key, value]),
          returnValue: Future<bool>.value(false)) as _i6.Future<bool>);
  @override
  _i6.Future<bool> setStringList(String? key, List<String>? value) =>
      (super.noSuchMethod(Invocation.method(#setStringList, [key, value]),
          returnValue: Future<bool>.value(false)) as _i6.Future<bool>);
  @override
  _i6.Future<bool> remove(String? key) =>
      (super.noSuchMethod(Invocation.method(#remove, [key]),
          returnValue: Future<bool>.value(false)) as _i6.Future<bool>);
  @override
  _i6.Future<bool> commit() =>
      (super.noSuchMethod(Invocation.method(#commit, []),
          returnValue: Future<bool>.value(false)) as _i6.Future<bool>);
  @override
  _i6.Future<bool> clear() => (super.noSuchMethod(Invocation.method(#clear, []),
      returnValue: Future<bool>.value(false)) as _i6.Future<bool>);
  @override
  _i6.Future<void> reload() =>
      (super.noSuchMethod(Invocation.method(#reload, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [HttpClientAdapter].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClientAdapter extends _i1.Mock implements _i2.HttpClientAdapter {
  MockHttpClientAdapter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.ResponseBody> fetch(
          _i7.RequestOptions? options,
          _i6.Stream<_i8.Uint8List>? requestStream,
          _i6.Future<dynamic>? cancelFuture) =>
      (super.noSuchMethod(
              Invocation.method(#fetch, [options, requestStream, cancelFuture]),
              returnValue:
                  Future<_i2.ResponseBody>.value(_FakeResponseBody_0()))
          as _i6.Future<_i2.ResponseBody>);
  @override
  void close({bool? force = false}) =>
      super.noSuchMethod(Invocation.method(#close, [], {#force: force}),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i9.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<bool> get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected),
          returnValue: Future<bool>.value(false)) as _i6.Future<bool>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [UserLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserLocalDataSource extends _i1.Mock
    implements _i10.UserLocalDataSource {
  MockUserLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i11.UserModel>> getLastUsers() => (super.noSuchMethod(
          Invocation.method(#getLastUsers, []),
          returnValue: Future<List<_i11.UserModel>>.value(<_i11.UserModel>[]))
      as _i6.Future<List<_i11.UserModel>>);
  @override
  _i6.Future<void> cacheUsers(List<_i11.UserModel>? usersToCache) =>
      (super.noSuchMethod(Invocation.method(#cacheUsers, [usersToCache]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [UserRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRemoteDataSource extends _i1.Mock
    implements _i12.UserRemoteDataSource {
  MockUserRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i11.UserModel>> getUsers() => (super.noSuchMethod(
          Invocation.method(#getUsers, []),
          returnValue: Future<List<_i11.UserModel>>.value(<_i11.UserModel>[]))
      as _i6.Future<List<_i11.UserModel>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i4.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i3.Either<_i13.Failure, List<_i14.User>>> getUsers() =>
      (super.noSuchMethod(Invocation.method(#getUsers, []),
          returnValue: Future<_i3.Either<_i13.Failure, List<_i14.User>>>.value(
              _FakeEither_1<_i13.Failure, List<_i14.User>>())) as _i6
          .Future<_i3.Either<_i13.Failure, List<_i14.User>>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [Connectivity].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivity extends _i1.Mock implements _i15.Connectivity {
  MockConnectivity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Stream<_i15.ConnectivityResult> get onConnectivityChanged =>
      (super.noSuchMethod(Invocation.getter(#onConnectivityChanged),
              returnValue: Stream<_i15.ConnectivityResult>.empty())
          as _i6.Stream<_i15.ConnectivityResult>);
  @override
  _i6.Future<_i15.ConnectivityResult> checkConnectivity() =>
      (super.noSuchMethod(Invocation.method(#checkConnectivity, []),
              returnValue: Future<_i15.ConnectivityResult>.value(
                  _i15.ConnectivityResult.wifi))
          as _i6.Future<_i15.ConnectivityResult>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [GetUsers].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetUsers extends _i1.Mock implements _i16.GetUsers {
  MockGetUsers() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.UserRepository get userRepository =>
      (super.noSuchMethod(Invocation.getter(#userRepository),
          returnValue: _FakeUserRepository_2()) as _i4.UserRepository);
  @override
  _i6.Future<_i3.Either<_i13.Failure, List<_i14.User>>> call(
          _i17.NoParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
          returnValue: Future<_i3.Either<_i13.Failure, List<_i14.User>>>.value(
              _FakeEither_1<_i13.Failure, List<_i14.User>>())) as _i6
          .Future<_i3.Either<_i13.Failure, List<_i14.User>>>);
  @override
  String toString() => super.toString();
}
